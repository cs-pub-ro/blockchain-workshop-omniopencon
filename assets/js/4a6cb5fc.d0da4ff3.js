"use strict";(globalThis.webpackChunkbpda=globalThis.webpackChunkbpda||[]).push([[5733],{5680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>f});var r=t(6540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,r)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach(function(n){a(e,n,t[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=r.createContext({}),s=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(i.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},b=r.forwardRef(function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(t),b=a,f=u["".concat(i,".").concat(b)]||u[b]||m[b]||o;return t?r.createElement(f,p(p({ref:n},c),{},{components:t})):r.createElement(f,p({ref:n},c))});function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,p=new Array(o);p[0]=b;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l[u]="string"==typeof e?e:a,p[1]=l;for(var s=2;s<o;s++)p[s]=t[s];return r.createElement.apply(null,p)}return r.createElement.apply(null,t)}b.displayName="MDXCreateElement"},9684:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>p,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=t(8168),a=(t(6540),t(5680));const o={},p="CTF Bump",l={unversionedId:"CTF/bump",id:"CTF/bump",title:"CTF Bump",description:"Let's see who can bump the most!",source:"@site/docs/CTF/bump.md",sourceDirName:"CTF",slug:"/CTF/bump",permalink:"/blockchain-protocols-and-distributed-applications/CTF/bump",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Capture the flag",permalink:"/blockchain-protocols-and-distributed-applications/CTF/"},next:{title:"CTF Coinflip",permalink:"/blockchain-protocols-and-distributed-applications/CTF/coinflip"}},i={},s=[],c={toc:s},u="wrapper";function m({components:e,...n}){return(0,a.yg)(u,(0,r.A)({},c,n,{components:e,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"ctf-bump"},"CTF Bump"),(0,a.yg)("p",null,"Let's see who can bump the most!"),(0,a.yg)("p",null,"Participants are asked to call ",(0,a.yg)("inlineCode",{parentName:"p"},"bump")," as many times as possible. Each ",(0,a.yg)("inlineCode",{parentName:"p"},"bump")," increases the score by one."),(0,a.yg)("p",null,"It is also possible to donate your bumps, if you're feeling generous (or if you used a smart contract to harvest more bumps)."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-Rust"},'#[multiversx_sc::contract]\npub trait CtfBump: bump_common::BumpCommon {\n    #[init]\n    fn init(&self) {}\n\n    #[upgrade]\n    fn upgrade(&self) {}\n\n    #[endpoint]\n    fn bump(&self) {\n        let caller = self.blockchain().get_caller();\n        self.perform_bump(&caller);\n    }\n\n    fn perform_bump(&self, bumper: &ManagedAddress) {\n        self.bumps(bumper).update(|bumps| *bumps += 1u32);\n    }\n\n    #[endpoint(donateBumps)]\n    fn donate_bumps(&self, receiver: ManagedAddress) {\n        let caller = self.blockchain().get_caller();\n        let caller_bumps = self.bumps(&caller).take();\n        self.bumps(&receiver).update(|bumps| *bumps += caller_bumps);\n    }\n    \n    #[view]\n    #[storage_mapper("bumps")]\n    fn bumps(&self, bumper: &ManagedAddress) -> SingleValueMapper<BigUint>;\n}\n')))}m.isMDXComponent=!0}}]);