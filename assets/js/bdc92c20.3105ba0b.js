"use strict";(globalThis.webpackChunkworkshop=globalThis.webpackChunkworkshop||[]).push([[7470],{5680:(e,n,r)=>{r.d(n,{xA:()=>c,yg:()=>b});var t=r(6540);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),r.push.apply(r,t)}return r}function p(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach(function(n){o(e,n,r[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))})}return e}function l(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=t.createContext({}),u=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):p(p({},n),e)),r},c=function(e){var n=u(e.components);return t.createElement(s.Provider,{value:n},e.children)},i="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},f=t.forwardRef(function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),i=u(r),f=o,b=i["".concat(s,".").concat(f)]||i[f]||m[f]||a;return r?t.createElement(b,p(p({ref:n},c),{},{components:r})):t.createElement(b,p({ref:n},c))});function b(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,p=new Array(a);p[0]=f;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[i]="string"==typeof e?e:o,p[1]=l;for(var u=2;u<a;u++)p[u]=r[u];return t.createElement.apply(null,p)}return t.createElement.apply(null,r)}f.displayName="MDXCreateElement"},9137:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>p,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var t=r(8168),o=(r(6540),r(5680));const a={},p="CTF Bump",l={unversionedId:"CTF Challenges/Bump/bump",id:"CTF Challenges/Bump/bump",title:"CTF Bump",description:"Let's see who can bump the most!",source:"@site/docs/CTF Challenges/Bump/bump.md",sourceDirName:"CTF Challenges/Bump",slug:"/CTF Challenges/Bump/",permalink:"/blockchain-workshop-omniopencon/CTF Challenges/Bump/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Capture the flag",permalink:"/blockchain-workshop-omniopencon/CTF Challenges/Overview/ctf"},next:{title:"CTF Coinflip",permalink:"/blockchain-workshop-omniopencon/CTF Challenges/Coinflip/"}},s={},u=[],c={toc:u},i="wrapper";function m({components:e,...n}){return(0,o.yg)(i,(0,t.A)({},c,n,{components:e,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"ctf-bump"},"CTF Bump"),(0,o.yg)("p",null,"Let's see who can bump the most!"),(0,o.yg)("p",null,"Participants are asked to call ",(0,o.yg)("inlineCode",{parentName:"p"},"bump")," as many times as possible. Each ",(0,o.yg)("inlineCode",{parentName:"p"},"bump")," increases the score by one."),(0,o.yg)("p",null,"It is also possible to donate your bumps, if you're feeling generous (or if you used a smart contract to harvest more bumps)."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-Rust"},'#[multiversx_sc::contract]\npub trait CtfBump: bump_common::BumpCommon {\n    #[init]\n    fn init(&self) {}\n\n    #[upgrade]\n    fn upgrade(&self) {}\n\n    #[endpoint]\n    fn bump(&self) {\n        let caller = self.blockchain().get_caller();\n        self.perform_bump(&caller);\n    }\n\n    fn perform_bump(&self, bumper: &ManagedAddress) {\n        self.bumps(bumper).update(|bumps| *bumps += 1u32);\n    }\n\n    #[endpoint(donateBumps)]\n    fn donate_bumps(&self, receiver: ManagedAddress) {\n        let caller = self.blockchain().get_caller();\n        let caller_bumps = self.bumps(&caller).take();\n        self.bumps(&receiver).update(|bumps| *bumps += caller_bumps);\n    }\n    \n    #[view]\n    #[storage_mapper("bumps")]\n    fn bumps(&self, bumper: &ManagedAddress) -> SingleValueMapper<BigUint>;\n}\n')))}m.isMDXComponent=!0}}]);